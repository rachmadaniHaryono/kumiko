#!/usr/bin/env python


import sys, os, json, argparse, subprocess
from kumikolib import Kumiko
from lib.html import HTML


parser = argparse.ArgumentParser(description='Kumiko CLI')

# Utilities
parser.add_argument('--debug-dir', nargs=1, help='Write debug files in this directory (image files with extra panel information and more)')
parser.add_argument('--progress', action='store_true', help='Prints progress information')

# Input/Output
parser.add_argument('-i', '--input', nargs=1, required=True, help='A file or folder name to parse')
parser.add_argument('-o', '--output', nargs=1, help='A file name to save json output to')

# HTML reader page options
parser.add_argument('-b', '--browser', nargs=1, help='Opens given browser to view the result when ready (implies --html)', choices=['firefox','konqueror','chromium'])
parser.add_argument('--html', action='store_true', help='Generates an HTML file showing the result')
parser.add_argument('--html-debug', action='store_true', help='Shows debug information on resulting HTML page')

# Configuration tweaks
parser.add_argument('--min-panel-size-ratio', nargs=1, type=float, help='Panels will be considered too small and exluded if they have a width < img.width * ratio or height < img/height * ratio (default is 1/15th)')



args = parser.parse_args()
k = Kumiko({
	'debug_dir': args.debug_dir[0] if args.debug_dir else False,
	'progress': args.progress,
	'min_panel_size_ratio': args.min_panel_size_ratio[0] if args.min_panel_size_ratio else False
})

file_or_folder = args.input[0]
if file_or_folder[-1] == '/':
	file_or_folder = file_or_folder[0:-1]

folder = file_or_folder
if os.path.isdir(file_or_folder):
	info = k.parse_dir(file_or_folder)
elif os.path.isfile(file_or_folder):
	info = k.parse_images([file_or_folder])
	folder = os.path.dirname(file_or_folder)
else:
	print("--input (-i) is not a file or directory: '"+file_or_folder+"'")
	sys.exit()

info = json.dumps(info)

if args.output:
	f = open(args.output[0], 'w')
	f.write(info)
	f.close()
else:
	print(info)


# generate html file for viewing the result
if args.html or args.browser:
	html_file = os.path.join('tests/results',os.path.basename(file_or_folder)+'.html')
	fh = open(html_file, 'w')
	fh.write(HTML.header(reldir='../../'))
	fh.write(HTML.reader(info,os.path.relpath(folder,'tests/results')+'/',args.html_debug))
	fh.write(HTML.footer)
	fh.close()
	print('Generated HTML file:',html_file)


if args.browser:
	subprocess.run([args.browser[0],html_file])
